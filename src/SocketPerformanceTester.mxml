<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   showStatusBar="false"
					   windowComplete="handler_init(event)">
	<s:layout>
		<s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingTop="10" paddingRight="10" gap="15"/>
	</s:layout>
	<fx:Style source="SocketPerformanceTester.css"/>
	<s:VGroup width="100%" verticalAlign="middle">
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="服务器地址："/>
			<s:TextInput id="serverTI" width="100%" prompt="形如：127.0.0.1:8080" text="127.0.0.1:8050"/>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Label text="连接数量"/>
			<s:NumericStepper id="numNS" width="100%" maximum="10000" minimum="1" maxChars="5"/>
			<s:Label text="间隔:"/>
			<s:NumericStepper id="timeNS" width="100%" maximum="10000"  minimum="0" />
			<s:Button id="connectBTN" label="连接" click="connectBTN_clickHandler(event)"/>
			<s:Button id="disconnBTN" label="断开" click="disconnBTN_clickHandler(event)"/>
		</s:HGroup>
	</s:VGroup>
	<s:HGroup width="100%" verticalAlign="middle">
		<s:Label id="resultLabel" width="100%"/>
	</s:HGroup>
	<s:VGroup width="100%">
		<s:HGroup width="100%" verticalAlign="middle">
			<s:DropDownList id="sendTypeDDL" requireSelection="true" width="130">
				<s:ArrayList>
					<fx:String>自定义数据包</fx:String>
					<fx:String>指定数据包大小</fx:String>
				</s:ArrayList>
			</s:DropDownList>
			<s:Spacer width="100%" height="20"/>
			<s:TextInput id="maskBaseTI" text="59" enabled="{sendTypeDDL.selectedIndex==0}" toolTip="以十六进制格式输入掩码基数，不要加0x前缀。例如：AF" maxChars="4"/>
			<s:Button id="buildMaskBTN" label="生成掩码" enabled="{sendTypeDDL.selectedIndex==0}" click="handler_buildMaskBTNclick(event)"/>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:TextInput id="packetTI" width="100%" toolTip="{sendTypeDDL.selectedIndex==0?SEND_INFO0:SEND_INFO1}"/>
			<s:Button id="sendBTN" label="发送" click="sendBTN_clickHandler(event)" enabled="false"/>
		</s:HGroup>
	</s:VGroup>
	<s:HGroup width="100%" verticalAlign="middle">
		<s:Button id="clearLogBTN" label="清空Log" click="clearLogBTN_clickHandler(event)"/>
		<s:Button id="openLogDirBTN" label="打开Log文件夹" click="File.applicationStorageDirectory.openWithDefaultApplication();"/>	
		<s:Button id="openLogBTN" label="打开log" click="openLogBTN_clickHandler(event)"/>	
	</s:HGroup>
	<fx:Script>
	<![CDATA[
		import flash.utils.clearTimeout;
		import flash.utils.getTimer;
		import flash.utils.setTimeout;
		
		import mx.events.AIREvent;
		import mx.rpc.mxml.Concurrency;
		private var _sockets:Vector.<Conn>;
		private var _logFile:File;
		private var _logStream:FileStream;
		private var _msg:String;
		private var _timer:Timer;
		private var _connSuccess:int=0;
		private var _timeoutid:int;
		
		private var _sendReg:RegExp = /^((n-?\d+|b-?\d{1,3}|i-?\d+|s[^,]+|u\d+),)*(n-?\d+|b-?\d{1,3}|i-?\d+|s[^,]+|u\d+)$/g;
		private static const SEND_INFO0:String = '按以下规则输入：\ns字符串,b字节,i32位整数,u32位无符号整数,n16位整数。例如:\nn1000,b-1,i65555,s你懂的';
		private static const SEND_INFO1:String = '直接输入数字（代表字节大小）;';
		
		protected function handler_init(event:AIREvent):void
		{
			_sockets = new Vector.<Conn>;
			_timer = new Timer(2000);
			_timer.addEventListener(TimerEvent.TIMER, handler_timer);
			_timer.start();
			this.title = 'Socket性能测试 v' + getDesc('versionNumber');
			_msg = '';
			_connSuccess = 0;
		}
		
		private function connect($server:String, $port:int):void
		{
			if(int(timeNS.value)==0)
			{
				var __num:int = numNS.value;
				for(var i:int=0;i<__num;i++)
				{
					connectToAServer($server, $port);
				}
			}
			else
			{
				if(_sockets && _sockets.length<int(numNS.value))
				{
					connectToAServer($server, $port);
					_timeoutid = setTimeout(connect, int(timeNS.value), $server, $port);
				}
			}
			
		}
		
		private function connectToAServer($server:String, $port:int):void
		{
			var __socket:Conn = new Conn(_sockets.length);
			__socket.addEventListener(Event.CONNECT, handler_connect);
			__socket.addEventListener(Event.CLOSE, handler_close);
			__socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handler_securityError);
			__socket.addEventListener(IOErrorEvent.IO_ERROR, handler_ioError);
			__socket.addEventListener(ProgressEvent.SOCKET_DATA, handler_data);
			__socket.connect($server, $port);
			_sockets[_sockets.length] = __socket;
		}
		
		private function getRandom($max:int):int
		{
			return int(Math.random()*$max);
			
		}
		
		private function showInfo(...$msg):void
		{
			for each(var __amsg:String in $msg)
			{
				_msg += __amsg +' ';
			}
			if(_msg) _msg += File.lineEnding;
		}
		
		private function handler_timer(evt:TimerEvent):void
		{
			//每2000毫秒写入一次log，避免写操作过于频繁
			if(_msg)
			{
				_logStream.open(_logFile, FileMode.APPEND);
				_logStream.writeUTFBytes(_msg);
				_logStream.close();
				_msg = '';
			}
		}
		
		protected function connectBTN_clickHandler(event:MouseEvent):void
		{
			if(serverTI.text)
			{
				var __sp:Array = serverTI.text.split(':');
				if(__sp.length!=2) return;
				connect(__sp[0], int(__sp[1]));
				connectBTN.enabled = false;
				_logFile = File.applicationStorageDirectory.resolvePath('log'+getTimer()+'.txt');
				_logStream = new FileStream();
			}
		}
		
		protected function disconnBTN_clickHandler(event:MouseEvent):void
		{
			if(!_sockets || _sockets.length==0) return;
			connectBTN.enabled = true;
			sendBTN.enabled = false;
			_logStream = null;
			_logFile = null;
			_connSuccess = 0;
			_msg = '';
			resultLabel.text = '';
			clearTimeout(_timeoutid);
			var __socket:Socket = null;
			while(_sockets.length>0)
			{
				__socket = _sockets.pop();
				if(__socket.connected) __socket.close();
				__socket.removeEventListener(Event.CONNECT, handler_connect);
				__socket.removeEventListener(Event.CLOSE, handler_close);
				__socket.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, handler_securityError);
				__socket.removeEventListener(IOErrorEvent.IO_ERROR, handler_ioError);
				__socket.removeEventListener(ProgressEvent.SOCKET_DATA, handler_data);
			}
		}
		
		private function handler_ioError(evt:IOErrorEvent):void
		{
			var __socket:Conn = evt.currentTarget as Conn;
			connectBTN.enabled = true;
			showInfo('Socket'+__socket.sid+' IO错误：',evt.text);
		}
		
		private function handler_connect(evt:Event):void
		{
			var __socket:Conn = evt.currentTarget as Conn;
			if (__socket.connected) 
			{
				showInfo('连接Socket'+__socket.sid+'服务器成功！');
				_connSuccess ++;
				resultLabel.text = '连接成功数量:'+_connSuccess;
				
			} 
			else 
			{
				showInfo('连接Socket'+__socket.sid+'服务器失败。');
			}
			if(_connSuccess == int(numNS.value))
			{
				connectBTN.enabled = false;
				sendBTN.enabled = true;
			}
		}
		
		private function handler_close(evt:Event):void
		{
			var __socket:Conn = evt.currentTarget as Conn;
			showInfo('Socket'+__socket.sid+'关闭：已经断开与服务器的连接。');
		}
		
		private function handler_securityError(evt:SecurityErrorEvent):void
		{
			var __socket:Conn = evt.currentTarget as Conn;
			showInfo('Socket'+__socket.sid+'安全错误：', evt.text);
		}
		
		private function handler_data(evt:ProgressEvent):void
		{
			var __socket:Conn = evt.currentTarget as Conn;
			var __data:ByteArray = new ByteArray();
			__socket.readBytes(__data);
			__data.position = 0;
			showInfo('收到Socket'+__socket.sid+'服务器消息,长度:', __data.length);
			var __msg:String = '';
//			for (var i:int = 0; i < __data.length; i++) 
//			{
//				__msg += __data.readByte().toString() + ' ';
//			}
			var __type:int = __data.readByte();
			if(__type == 1)
				__msg = __data.readByte().toString();
			else if(__type == 2)
				__msg = __data.readShort().toString();
			else if(__type == 3)
				__msg = __data.readInt().toString();
			else if(__type == 4)
				__msg = __data.readUnsignedInt().toString();
			else
				__msg = __data.readUTF();
			showInfo('内容：', __msg);
		}
		
		protected function clearLogBTN_clickHandler(event:MouseEvent):void
		{
			var __logs:Array = File.applicationStorageDirectory.getDirectoryListing();
			for(var i:int=0;i<__logs.length;i++)
			{
				File(__logs[i]).deleteFile();
			}
		}
		
		protected function sendBTN_clickHandler(event:MouseEvent):void
		{
			var __ba:ByteArray = new ByteArray();
			__ba.endian = Endian.LITTLE_ENDIAN;
			resultLabel.text = '';
			var __input:String = packetTI.text;
			if(sendTypeDDL.selectedIndex == 0)
			{
				_sendReg.lastIndex = 0;
				var __isMatch:Boolean = _sendReg.test(__input);
				trace('测试字符串:', __input, ',长度:', __input.length, ',是否匹配：', __isMatch);
				if(__isMatch)
				{
					var __arr:Array = __input.split(',');
					var __str:String = '';
					for (var i:int = 0; i < __arr.length; i++) 
					{
						__str = String(__arr[i]);
						var __type:String = __str.slice(0,1);
						var __value:String = __str.slice(1, __str.length);
						trace('写入：', __type, __value);
						switch(__type)
						{
							case 's':
								__ba.writeUTF(String(__value));
								break;
							case 'u':
								__ba.writeUnsignedInt(uint(__value));
								break;
							case 'n':
								__ba.writeShort(int(__value));
								break;
							case 'i':
								__ba.writeInt(int(__value));
								break;
							case 'b':
								__ba.writeByte(int(__value));
								break;
						}
					}
				}
				else
				{
					resultLabel.text = '要发送的数据不符合规则';
					return;
				}
			}
			else
			{
				var __num:Number = parseInt(__input)/8;
				if(isNaN(__num))
				{
					resultLabel.text = '输入的不是数字';
					return;
				}
				for(var j:int=0;j<__num;j++)
				{
					__ba.writeDouble(1.0);
				}
			}
			__ba.position = 0;
			for(i=0;i<_sockets.length;i++)
			{
				_sockets[i].writeBytes(__ba);
				_sockets[i].flush();
			}
			packetTI.text = '';
		}
		
		public function getDesc($name:String):String
		{
			var __desc:XML = NativeApplication.nativeApplication.applicationDescriptor;
			var __ns:Namespace = __desc.namespace();
			return __desc.__ns::[$name];
		}
		
		protected function openLogBTN_clickHandler(event:MouseEvent):void
		{
			if(_logFile && _logFile.exists)	_logFile.openWithDefaultApplication()
		}
		
		protected function handler_buildMaskBTNclick($event:MouseEvent):void
		{
			var __maskBase:Number = parseInt(maskBaseTI.text, 16);
			var __maskCode:* = getRandom(10000) & __maskBase;
			var __append:String = (packetTI.text? ',b':'b')+__maskCode.toString(16);
			packetTI.appendText(__append);
		}
	]]>
	</fx:Script>
</s:WindowedApplication>
